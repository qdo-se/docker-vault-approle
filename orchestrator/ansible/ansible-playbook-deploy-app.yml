- hosts: localhost

  # Orchestrator's vault credentials
  vars:
    vault_role_id: "{{ lookup('env', 'VAULT_ROLE_ID') }}"
    vault_secret_id: "{{ lookup('env', 'VAULT_SECRET_ID') }}"

  tasks:
    - name: Git checkout
      git:
        repo: 'https://github.com/quang-do-se/spring-vault.git'
        dest: /home/orchestrator/spring-vault
        version: api

    - name: Gradle build
      shell: |
        cd /home/orchestrator/spring-vault
        gradle clean assemble

    - name: Generate app's role id and secret id 
      shell: |
        vault login $(vault write -field=token auth/approle/login role_id="{{ vault_role_id }}" secret_id="{{ vault_secret_id }}")
        
        echo vault.app-role.role-id=$(vault read -field=role_id auth/approle/role/app/role-id) > /secrets/vault.properties
        echo vault.app-role.secret-id=$(vault write -force -field=secret_id auth/approle/role/app/secret-id) >> /secrets/vault.properties
        echo vault.uri=http://vault:8200 >> /secrets/vault.properties
      no_log: true

- hosts: app_group

  tasks:
    - name: Send vault.properties to app container
      ansible.builtin.copy:
        src: /tmp/vault.properties
        dest: /home/app
    
    - name: Send jar to app container
      ansible.builtin.copy:
        src: /home/orchestrator/spring-vault/build/libs/spring-vault-1.0-SNAPSHOT.jar
        dest: /home/app

    - name: Stop running application
      shell: |
        pid=$(ps aux | grep -i "spring-vault.*\.jar" | grep -v grep | awk '{print $2}')
        
        if ps -p "${pid}" > /dev/null; then
          kill "${pid}"
        fi

    - name: Start application
      shell: |
        export TZ=America/Denver

        nohup /usr/local/openjdk-8/bin/java \
          -jar /home/app/spring-vault-1.0-SNAPSHOT.jar \
          --spring.config.location=file:/secrets/vault.properties \
          --spring.profiles.active=development \
          --logging.file.path=/home/app/logs &    
